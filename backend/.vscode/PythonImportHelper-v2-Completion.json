[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TYPE_CHECKING",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "AsyncGenerator",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "insert",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "delete",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "delete",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "insert",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "NullPool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "delete",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "insert",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "asyncio",
        "description": "asyncio",
        "detail": "asyncio",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "Connection",
        "importPath": "sqlalchemy.engine",
        "description": "sqlalchemy.engine",
        "isExtraImport": true,
        "detail": "sqlalchemy.engine",
        "documentation": {}
    },
    {
        "label": "async_engine_from_config",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_sessionmaker",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "AsyncSession",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "async_sessionmaker",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "db_settings",
        "importPath": "src.db",
        "description": "src.db",
        "isExtraImport": true,
        "detail": "src.db",
        "documentation": {}
    },
    {
        "label": "db_helper",
        "importPath": "src.db",
        "description": "src.db",
        "isExtraImport": true,
        "detail": "src.db",
        "documentation": {}
    },
    {
        "label": "db_settings",
        "importPath": "src.db",
        "description": "src.db",
        "isExtraImport": true,
        "detail": "src.db",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.db.models",
        "description": "src.db.models",
        "isExtraImport": true,
        "detail": "src.db.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.db.models",
        "description": "src.db.models",
        "isExtraImport": true,
        "detail": "src.db.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.db.models",
        "description": "src.db.models",
        "isExtraImport": true,
        "detail": "src.db.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.db.models",
        "description": "src.db.models",
        "isExtraImport": true,
        "detail": "src.db.models",
        "documentation": {}
    },
    {
        "label": "Todo",
        "importPath": "src.db.models",
        "description": "src.db.models",
        "isExtraImport": true,
        "detail": "src.db.models",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.db.models",
        "description": "src.db.models",
        "isExtraImport": true,
        "detail": "src.db.models",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "UTC",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "UTC",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "UTC",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "UTC",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ConfigDict",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "Field",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Cookie",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Todo",
        "importPath": "src.db.models.todo",
        "description": "src.db.models.todo",
        "isExtraImport": true,
        "detail": "src.db.models.todo",
        "documentation": {}
    },
    {
        "label": "Todo",
        "importPath": "src.db.models.todo",
        "description": "src.db.models.todo",
        "isExtraImport": true,
        "detail": "src.db.models.todo",
        "documentation": {}
    },
    {
        "label": "Todo",
        "importPath": "src.db.models.todo",
        "description": "src.db.models.todo",
        "isExtraImport": true,
        "detail": "src.db.models.todo",
        "documentation": {}
    },
    {
        "label": "Todo",
        "importPath": "src.db.models.todo",
        "description": "src.db.models.todo",
        "isExtraImport": true,
        "detail": "src.db.models.todo",
        "documentation": {}
    },
    {
        "label": "get_todo_by_id",
        "importPath": "src.dependencies.todo_dep",
        "description": "src.dependencies.todo_dep",
        "isExtraImport": true,
        "detail": "src.dependencies.todo_dep",
        "documentation": {}
    },
    {
        "label": "todo_service",
        "importPath": "src.services.todo_service",
        "description": "src.services.todo_service",
        "isExtraImport": true,
        "detail": "src.services.todo_service",
        "documentation": {}
    },
    {
        "label": "TodoService",
        "importPath": "src.services.todo_service",
        "description": "src.services.todo_service",
        "isExtraImport": true,
        "detail": "src.services.todo_service",
        "documentation": {}
    },
    {
        "label": "todo_service",
        "importPath": "src.services.todo_service",
        "description": "src.services.todo_service",
        "isExtraImport": true,
        "detail": "src.services.todo_service",
        "documentation": {}
    },
    {
        "label": "TodoService",
        "importPath": "src.services.todo_service",
        "description": "src.services.todo_service",
        "isExtraImport": true,
        "detail": "src.services.todo_service",
        "documentation": {}
    },
    {
        "label": "IntegrityError",
        "importPath": "sqlalchemy.exc",
        "description": "sqlalchemy.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.exc",
        "documentation": {}
    },
    {
        "label": "auth_service",
        "importPath": "src.auth.auth_service",
        "description": "src.auth.auth_service",
        "isExtraImport": true,
        "detail": "src.auth.auth_service",
        "documentation": {}
    },
    {
        "label": "auth_service",
        "importPath": "src.auth.auth_service",
        "description": "src.auth.auth_service",
        "isExtraImport": true,
        "detail": "src.auth.auth_service",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.db.models.user",
        "description": "src.db.models.user",
        "isExtraImport": true,
        "detail": "src.db.models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "src.db.models.user",
        "description": "src.db.models.user",
        "isExtraImport": true,
        "detail": "src.db.models.user",
        "documentation": {}
    },
    {
        "label": "app_settings",
        "importPath": "src.app_config",
        "description": "src.app_config",
        "isExtraImport": true,
        "detail": "src.app_config",
        "documentation": {}
    },
    {
        "label": "app_settings",
        "importPath": "src.app_config",
        "description": "src.app_config",
        "isExtraImport": true,
        "detail": "src.app_config",
        "documentation": {}
    },
    {
        "label": "jwt_service",
        "importPath": "src.auth.jwt_service",
        "description": "src.auth.jwt_service",
        "isExtraImport": true,
        "detail": "src.auth.jwt_service",
        "documentation": {}
    },
    {
        "label": "jwt_service",
        "importPath": "src.auth.jwt_service",
        "description": "src.auth.jwt_service",
        "isExtraImport": true,
        "detail": "src.auth.jwt_service",
        "documentation": {}
    },
    {
        "label": "UserCreateSchema",
        "importPath": "src.auth.api.schemas",
        "description": "src.auth.api.schemas",
        "isExtraImport": true,
        "detail": "src.auth.api.schemas",
        "documentation": {}
    },
    {
        "label": "UserCreateSchema",
        "importPath": "src.auth.api.schemas",
        "description": "src.auth.api.schemas",
        "isExtraImport": true,
        "detail": "src.auth.api.schemas",
        "documentation": {}
    },
    {
        "label": "UserLoginSchema",
        "importPath": "src.auth.api.schemas",
        "description": "src.auth.api.schemas",
        "isExtraImport": true,
        "detail": "src.auth.api.schemas",
        "documentation": {}
    },
    {
        "label": "session_dependency",
        "importPath": "src.dependencies.session_dep",
        "description": "src.dependencies.session_dep",
        "isExtraImport": true,
        "detail": "src.dependencies.session_dep",
        "documentation": {}
    },
    {
        "label": "session_dependency",
        "importPath": "src.dependencies.session_dep",
        "description": "src.dependencies.session_dep",
        "isExtraImport": true,
        "detail": "src.dependencies.session_dep",
        "documentation": {}
    },
    {
        "label": "session_dependency",
        "importPath": "src.dependencies.session_dep",
        "description": "src.dependencies.session_dep",
        "isExtraImport": true,
        "detail": "src.dependencies.session_dep",
        "documentation": {}
    },
    {
        "label": "auth_by_jwt_payload",
        "importPath": "src.dependencies.auth_dep",
        "description": "src.dependencies.auth_dep",
        "isExtraImport": true,
        "detail": "src.dependencies.auth_dep",
        "documentation": {}
    },
    {
        "label": "get_payload_from_jwt_cookie",
        "importPath": "src.dependencies.auth_dep",
        "description": "src.dependencies.auth_dep",
        "isExtraImport": true,
        "detail": "src.dependencies.auth_dep",
        "documentation": {}
    },
    {
        "label": "login_user_by_username_and_password",
        "importPath": "src.dependencies.auth_dep",
        "description": "src.dependencies.auth_dep",
        "isExtraImport": true,
        "detail": "src.dependencies.auth_dep",
        "documentation": {}
    },
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "jwt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "jwt",
        "description": "jwt",
        "detail": "jwt",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declared_attr",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "SettingsConfigDict",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "InvalidTokenError",
        "importPath": "jwt.exceptions",
        "description": "jwt.exceptions",
        "isExtraImport": true,
        "detail": "jwt.exceptions",
        "documentation": {}
    },
    {
        "label": "unauth_401_exc",
        "importPath": "src.auth.api.exceptions",
        "description": "src.auth.api.exceptions",
        "isExtraImport": true,
        "detail": "src.auth.api.exceptions",
        "documentation": {}
    },
    {
        "label": "not_accept_406_exc",
        "importPath": "src.auth.api.exceptions",
        "description": "src.auth.api.exceptions",
        "isExtraImport": true,
        "detail": "src.auth.api.exceptions",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ToDoCreateSchema",
        "importPath": "src.api.v1.todo.schemas",
        "description": "src.api.v1.todo.schemas",
        "isExtraImport": true,
        "detail": "src.api.v1.todo.schemas",
        "documentation": {}
    },
    {
        "label": "ToDoSchema",
        "importPath": "src.api.v1.todo.schemas",
        "description": "src.api.v1.todo.schemas",
        "isExtraImport": true,
        "detail": "src.api.v1.todo.schemas",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyRepository",
        "importPath": "src.respositories",
        "description": "src.respositories",
        "isExtraImport": true,
        "detail": "src.respositories",
        "documentation": {}
    },
    {
        "label": "AbstractRepository",
        "importPath": "src.respositories",
        "description": "src.respositories",
        "isExtraImport": true,
        "detail": "src.respositories",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "ASGITransport",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "AsyncClient",
        "importPath": "httpx",
        "description": "httpx",
        "isExtraImport": true,
        "detail": "httpx",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "main",
        "description": "main",
        "isExtraImport": true,
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "auth_service",
        "importPath": "src.auth",
        "description": "src.auth",
        "isExtraImport": true,
        "detail": "src.auth",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.api",
        "description": "src.api",
        "isExtraImport": true,
        "detail": "src.api",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "src.auth.api.view",
        "description": "src.auth.api.view",
        "isExtraImport": true,
        "detail": "src.auth.api.view",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.2024_07_07_0631-8fef70ab7a5c_create_tabkes",
        "description": "alembic.versions.2024_07_07_0631-8fef70ab7a5c_create_tabkes",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table(\n        \"users\",\n        sa.Column(\"username\", sa.String(length=20), nullable=False),\n        sa.Column(\"hashed_password\", sa.String(), nullable=False),\n        sa.Column(\"id\", sa.Integer(), nullable=False),\n        sa.PrimaryKeyConstraint(\"id\"),\n        sa.UniqueConstraint(\"username\"),\n    )",
        "detail": "alembic.versions.2024_07_07_0631-8fef70ab7a5c_create_tabkes",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.2024_07_07_0631-8fef70ab7a5c_create_tabkes",
        "description": "alembic.versions.2024_07_07_0631-8fef70ab7a5c_create_tabkes",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table(\"todos\")\n    op.drop_table(\"users\")\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.2024_07_07_0631-8fef70ab7a5c_create_tabkes",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "do_run_migrations",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def do_run_migrations(connection: Connection) -> None:\n    context.configure(connection=connection, target_metadata=target_metadata)\n    with context.begin_transaction():\n        context.run_migrations()\nasync def run_async_migrations() -> None:\n    \"\"\"In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = async_engine_from_config(\n        config.get_section(config.config_ini_section, {}),",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\"\"\"\n    asyncio.run(run_async_migrations())\nif context.is_offline_mode():\n    run_migrations_offline()\nelse:\n    run_migrations_online()",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "config = context.config\nconfig.set_main_option(\n    \"sqlalchemy.url\",\n    db_settings.postgres_db_url,\n)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "ToDoCreateSchema",
        "kind": 6,
        "importPath": "src.api.v1.todo.schemas",
        "description": "src.api.v1.todo.schemas",
        "peekOfCode": "class ToDoCreateSchema(BaseModel):\n    user_username: str\n    title: str = Field(max_length=20)\n    description: str\nclass ToDoUpdateSchema(BaseModel):\n    title: str | None = None\n    description: str | None = None\nclass ToDoDeleteSchema(BaseModel):\n    title: str\nclass ToDoSchema(ToDoCreateSchema):",
        "detail": "src.api.v1.todo.schemas",
        "documentation": {}
    },
    {
        "label": "ToDoUpdateSchema",
        "kind": 6,
        "importPath": "src.api.v1.todo.schemas",
        "description": "src.api.v1.todo.schemas",
        "peekOfCode": "class ToDoUpdateSchema(BaseModel):\n    title: str | None = None\n    description: str | None = None\nclass ToDoDeleteSchema(BaseModel):\n    title: str\nclass ToDoSchema(ToDoCreateSchema):\n    id: int\n    model_config = ConfigDict()\nclass ToDoSchemaReturn(ToDoCreateSchema):\n    created_at: datetime",
        "detail": "src.api.v1.todo.schemas",
        "documentation": {}
    },
    {
        "label": "ToDoDeleteSchema",
        "kind": 6,
        "importPath": "src.api.v1.todo.schemas",
        "description": "src.api.v1.todo.schemas",
        "peekOfCode": "class ToDoDeleteSchema(BaseModel):\n    title: str\nclass ToDoSchema(ToDoCreateSchema):\n    id: int\n    model_config = ConfigDict()\nclass ToDoSchemaReturn(ToDoCreateSchema):\n    created_at: datetime",
        "detail": "src.api.v1.todo.schemas",
        "documentation": {}
    },
    {
        "label": "ToDoSchema",
        "kind": 6,
        "importPath": "src.api.v1.todo.schemas",
        "description": "src.api.v1.todo.schemas",
        "peekOfCode": "class ToDoSchema(ToDoCreateSchema):\n    id: int\n    model_config = ConfigDict()\nclass ToDoSchemaReturn(ToDoCreateSchema):\n    created_at: datetime",
        "detail": "src.api.v1.todo.schemas",
        "documentation": {}
    },
    {
        "label": "ToDoSchemaReturn",
        "kind": 6,
        "importPath": "src.api.v1.todo.schemas",
        "description": "src.api.v1.todo.schemas",
        "peekOfCode": "class ToDoSchemaReturn(ToDoCreateSchema):\n    created_at: datetime",
        "detail": "src.api.v1.todo.schemas",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.api.v1.todo.view",
        "description": "src.api.v1.todo.view",
        "peekOfCode": "router = APIRouter(prefix=\"/todo\", tags=[\"Todo\"])\n@router.post(\n    \"/create\",\n    response_model=ToDoSchemaReturn,\n)\nasync def create_todo(\n    todo: ToDoCreateSchema,\n    todo_service: TodoService = Depends(todo_service),\n):\n    return await todo_service.create_todo(todo)",
        "detail": "src.api.v1.todo.view",
        "documentation": {}
    },
    {
        "label": "not_accept_406_exc",
        "kind": 2,
        "importPath": "src.auth.api.exceptions",
        "description": "src.auth.api.exceptions",
        "peekOfCode": "def not_accept_406_exc(detail: str):\n    not_accept = HTTPException(\n        status_code=status.HTTP_406_NOT_ACCEPTABLE,\n        detail=detail,\n    )\n    return not_accept\ndef unauth_401_exc(detail: str):\n    unregistered_exc = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=detail,",
        "detail": "src.auth.api.exceptions",
        "documentation": {}
    },
    {
        "label": "unauth_401_exc",
        "kind": 2,
        "importPath": "src.auth.api.exceptions",
        "description": "src.auth.api.exceptions",
        "peekOfCode": "def unauth_401_exc(detail: str):\n    unregistered_exc = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=detail,\n    )\n    return unregistered_exc\ndef something_wrong_400_exc(detail: str):\n    something_wrong_exc = HTTPException(\n        status_code=status.HTTP_400_BAD_REQUEST, detail=detail\n    )",
        "detail": "src.auth.api.exceptions",
        "documentation": {}
    },
    {
        "label": "something_wrong_400_exc",
        "kind": 2,
        "importPath": "src.auth.api.exceptions",
        "description": "src.auth.api.exceptions",
        "peekOfCode": "def something_wrong_400_exc(detail: str):\n    something_wrong_exc = HTTPException(\n        status_code=status.HTTP_400_BAD_REQUEST, detail=detail\n    )\n    return something_wrong_exc\ndef user_already_find_202(detail: str):\n    accept = HTTPException(\n        status_code=status.HTTP_202_ACCEPTED,\n        detail=detail,\n    )",
        "detail": "src.auth.api.exceptions",
        "documentation": {}
    },
    {
        "label": "user_already_find_202",
        "kind": 2,
        "importPath": "src.auth.api.exceptions",
        "description": "src.auth.api.exceptions",
        "peekOfCode": "def user_already_find_202(detail: str):\n    accept = HTTPException(\n        status_code=status.HTTP_202_ACCEPTED,\n        detail=detail,\n    )\n    return accept",
        "detail": "src.auth.api.exceptions",
        "documentation": {}
    },
    {
        "label": "UserCreateSchema",
        "kind": 6,
        "importPath": "src.auth.api.schemas",
        "description": "src.auth.api.schemas",
        "peekOfCode": "class UserCreateSchema(BaseModel):\n    username: str = Field(max_length=20)\n    model_config = ConfigDict()\nclass UserRegisterSchema(UserCreateSchema):\n    password: str = Field(min_length=5)\nclass UserLoginSchema(BaseModel):\n    username: str = Field(max_length=20)\n    password: str = Field(min_length=5)\nclass UserUpdateSchema(BaseModel):\n    username: str | None = None",
        "detail": "src.auth.api.schemas",
        "documentation": {}
    },
    {
        "label": "UserRegisterSchema",
        "kind": 6,
        "importPath": "src.auth.api.schemas",
        "description": "src.auth.api.schemas",
        "peekOfCode": "class UserRegisterSchema(UserCreateSchema):\n    password: str = Field(min_length=5)\nclass UserLoginSchema(BaseModel):\n    username: str = Field(max_length=20)\n    password: str = Field(min_length=5)\nclass UserUpdateSchema(BaseModel):\n    username: str | None = None\n    password: str | None = None\nclass UserSchema(UserCreateSchema):\n    id: int",
        "detail": "src.auth.api.schemas",
        "documentation": {}
    },
    {
        "label": "UserLoginSchema",
        "kind": 6,
        "importPath": "src.auth.api.schemas",
        "description": "src.auth.api.schemas",
        "peekOfCode": "class UserLoginSchema(BaseModel):\n    username: str = Field(max_length=20)\n    password: str = Field(min_length=5)\nclass UserUpdateSchema(BaseModel):\n    username: str | None = None\n    password: str | None = None\nclass UserSchema(UserCreateSchema):\n    id: int\nclass LogoutSchema(BaseModel):\n    Status: str",
        "detail": "src.auth.api.schemas",
        "documentation": {}
    },
    {
        "label": "UserUpdateSchema",
        "kind": 6,
        "importPath": "src.auth.api.schemas",
        "description": "src.auth.api.schemas",
        "peekOfCode": "class UserUpdateSchema(BaseModel):\n    username: str | None = None\n    password: str | None = None\nclass UserSchema(UserCreateSchema):\n    id: int\nclass LogoutSchema(BaseModel):\n    Status: str\n    data: str",
        "detail": "src.auth.api.schemas",
        "documentation": {}
    },
    {
        "label": "UserSchema",
        "kind": 6,
        "importPath": "src.auth.api.schemas",
        "description": "src.auth.api.schemas",
        "peekOfCode": "class UserSchema(UserCreateSchema):\n    id: int\nclass LogoutSchema(BaseModel):\n    Status: str\n    data: str",
        "detail": "src.auth.api.schemas",
        "documentation": {}
    },
    {
        "label": "LogoutSchema",
        "kind": 6,
        "importPath": "src.auth.api.schemas",
        "description": "src.auth.api.schemas",
        "peekOfCode": "class LogoutSchema(BaseModel):\n    Status: str\n    data: str",
        "detail": "src.auth.api.schemas",
        "documentation": {}
    },
    {
        "label": "validate_user_by_username",
        "kind": 2,
        "importPath": "src.auth.api.utils",
        "description": "src.auth.api.utils",
        "peekOfCode": "def validate_user_by_username(payload: dict, user: UserCreateSchema) -> bool:\n    username_from_payload = payload.get(\"username\")\n    if username_from_payload is None:\n        raise unauth_401_exc(f\"Юзер в токене не найден\")\n    if user.username == username_from_payload:\n        return True\n    raise unauth_401_exc(f\"Такой юзер не найден.\")",
        "detail": "src.auth.api.utils",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.auth.api.view",
        "description": "src.auth.api.view",
        "peekOfCode": "router = APIRouter(prefix=\"/auth\")\n@router.post(\n    \"/register\",\n    response_model=UserCreateSchema,\n    status_code=status.HTTP_201_CREATED,\n)\nasync def register_user(\n    session: Annotated[\n        AsyncSession,\n        Depends(session_dependency),",
        "detail": "src.auth.api.view",
        "documentation": {}
    },
    {
        "label": "AuthService",
        "kind": 6,
        "importPath": "src.auth.auth_service",
        "description": "src.auth.auth_service",
        "peekOfCode": "class AuthService:\n    # хешируем пароль указаный при регистрации\n    def hash_password(self, password: str) -> str:\n        salt = bcrypt.gensalt()\n        pwd_bytes: bytes = password.encode()\n        return bcrypt.hashpw(pwd_bytes, salt).decode()\n    # хешируем введенный пароль и сверяеми с хешем в базе данных\n    def validate_pass(\n        self,\n        password: str,",
        "detail": "src.auth.auth_service",
        "documentation": {}
    },
    {
        "label": "auth_service",
        "kind": 5,
        "importPath": "src.auth.auth_service",
        "description": "src.auth.auth_service",
        "peekOfCode": "auth_service = AuthService()",
        "detail": "src.auth.auth_service",
        "documentation": {}
    },
    {
        "label": "JWT_Service",
        "kind": 6,
        "importPath": "src.auth.jwt_service",
        "description": "src.auth.jwt_service",
        "peekOfCode": "class JWT_Service:\n    def __init__(\n        self,\n        TOKEN_TYPE_FIELD: str,\n        ACCESS_TOKEN_TYPE: str,\n        PRIVATE_KEY: str,\n        PUBLIC_KEY: str,\n        ALGORITHM: str,\n        COOKIE_ALIAS: str,\n        token_expire_minutes: int,",
        "detail": "src.auth.jwt_service",
        "documentation": {}
    },
    {
        "label": "jwt_service",
        "kind": 5,
        "importPath": "src.auth.jwt_service",
        "description": "src.auth.jwt_service",
        "peekOfCode": "jwt_service = JWT_Service(\n    TOKEN_TYPE_FIELD=\"type\",\n    ACCESS_TOKEN_TYPE=\"access\",\n    PRIVATE_KEY=app_settings.jwt_settings.private_key_path,\n    PUBLIC_KEY=app_settings.jwt_settings.public_key_path,\n    ALGORITHM=app_settings.jwt_settings.algorithm,\n    token_expire_minutes=app_settings.jwt_settings.access_token_expire_minutes,\n    COOKIE_ALIAS=app_settings.jwt_settings.cookie_alias,\n)",
        "detail": "src.auth.jwt_service",
        "documentation": {}
    },
    {
        "label": "Todo",
        "kind": 6,
        "importPath": "src.db.models.todo",
        "description": "src.db.models.todo",
        "peekOfCode": "class Todo(Base):\n    title: Mapped[str] = mapped_column(String(50))\n    description: Mapped[str] = mapped_column(nullable=True)\n    created_at: Mapped[datetime] = mapped_column(default=datetime.now(UTC))\n    user_username: Mapped[str] = mapped_column(ForeignKey(\"users.username\"))\n    user: Mapped[\"User\"] = relationship(back_populates=\"todos\")",
        "detail": "src.db.models.todo",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "src.db.models.user",
        "description": "src.db.models.user",
        "peekOfCode": "class User(Base):\n    username: Mapped[str] = mapped_column(String(20), unique=True)\n    hashed_password: Mapped[str]\n    todos: Mapped[list[\"Todo\"]] = relationship(back_populates=\"user\")",
        "detail": "src.db.models.user",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 6,
        "importPath": "src.db.models._base",
        "description": "src.db.models._base",
        "peekOfCode": "class Base(DeclarativeBase):\n    __abstract__ = True\n    id: Mapped[int] = mapped_column(primary_key=True)\n    @declared_attr.directive\n    def __tablename__(cls) -> str:\n        return f\"{cls.__name__.lower()}s\"",
        "detail": "src.db.models._base",
        "documentation": {}
    },
    {
        "label": "Db_Settings",
        "kind": 6,
        "importPath": "src.db.db_config",
        "description": "src.db.db_config",
        "peekOfCode": "class Db_Settings(BaseSettings):\n    DB_HOST: str\n    DB_PORT: int\n    DB_NAME: str\n    DB_PASS: str\n    DB_USER: str\n    DB_NAME_TEST: str\n    @property\n    def postgres_db_url(self):\n        return f\"postgresql+asyncpg://{self.DB_USER}:{self.DB_PASS}@{self.DB_HOST}:{self.DB_PORT}/{self.DB_NAME}\"",
        "detail": "src.db.db_config",
        "documentation": {}
    },
    {
        "label": "SRC_DIR",
        "kind": 5,
        "importPath": "src.db.db_config",
        "description": "src.db.db_config",
        "peekOfCode": "SRC_DIR = Path(__file__).parent.parent.parent\nclass Db_Settings(BaseSettings):\n    DB_HOST: str\n    DB_PORT: int\n    DB_NAME: str\n    DB_PASS: str\n    DB_USER: str\n    DB_NAME_TEST: str\n    @property\n    def postgres_db_url(self):",
        "detail": "src.db.db_config",
        "documentation": {}
    },
    {
        "label": "db_settings",
        "kind": 5,
        "importPath": "src.db.db_config",
        "description": "src.db.db_config",
        "peekOfCode": "db_settings = Db_Settings()",
        "detail": "src.db.db_config",
        "documentation": {}
    },
    {
        "label": "DB_Helper",
        "kind": 6,
        "importPath": "src.db.db_helper",
        "description": "src.db.db_helper",
        "peekOfCode": "class DB_Helper:\n    def __init__(\n        self,\n        url: str,\n        echo: bool,\n        pool_size: int,\n    ) -> None:\n        self.engine = create_async_engine(\n            url=url,\n            echo=echo,",
        "detail": "src.db.db_helper",
        "documentation": {}
    },
    {
        "label": "db_helper",
        "kind": 5,
        "importPath": "src.db.db_helper",
        "description": "src.db.db_helper",
        "peekOfCode": "db_helper = DB_Helper(\n    url=db_settings.postgres_db_url,\n    echo=True,\n    pool_size=50,\n)",
        "detail": "src.db.db_helper",
        "documentation": {}
    },
    {
        "label": "AbstractRepository",
        "kind": 6,
        "importPath": "src.respositories._abc_repo",
        "description": "src.respositories._abc_repo",
        "peekOfCode": "class AbstractRepository(ABC):\n    @abstractmethod\n    async def create_one():\n        raise NotImplementedError\n    @abstractmethod\n    async def get_one():\n        raise NotImplementedError\n    @abstractmethod\n    async def get_all():\n        raise NotImplementedError",
        "detail": "src.respositories._abc_repo",
        "documentation": {}
    },
    {
        "label": "SQLAlchemyRepository",
        "kind": 6,
        "importPath": "src.respositories._sqlalchemy_repo",
        "description": "src.respositories._sqlalchemy_repo",
        "peekOfCode": "class SQLAlchemyRepository(AbstractRepository):\n    model = None\n    def __init__(self, session: AsyncSession) -> None:\n        self.session = session\n    async def create_one(self, item):\n        stmt = insert(self.model).values(**item)\n        await self.session.execute(stmt)\n    async def get_one(self, **filter_by):\n        query = select(self.model).filter_by(**filter_by)\n        res = await self.session.execute(query)",
        "detail": "src.respositories._sqlalchemy_repo",
        "documentation": {}
    },
    {
        "label": "TodoRepository",
        "kind": 6,
        "importPath": "src.services.todo_service",
        "description": "src.services.todo_service",
        "peekOfCode": "class TodoRepository(SQLAlchemyRepository):\n    model = Todo\nclass TodoService:\n    def __init__(\n        self,\n        repo,\n        session,\n    ):\n        self.repo: AbstractRepository = repo(session)\n        self.session = session",
        "detail": "src.services.todo_service",
        "documentation": {}
    },
    {
        "label": "TodoService",
        "kind": 6,
        "importPath": "src.services.todo_service",
        "description": "src.services.todo_service",
        "peekOfCode": "class TodoService:\n    def __init__(\n        self,\n        repo,\n        session,\n    ):\n        self.repo: AbstractRepository = repo(session)\n        self.session = session\n    # создать todo\n    async def create_todo(",
        "detail": "src.services.todo_service",
        "documentation": {}
    },
    {
        "label": "todo_service",
        "kind": 2,
        "importPath": "src.services.todo_service",
        "description": "src.services.todo_service",
        "peekOfCode": "def todo_service(session: Annotated[AsyncSession, Depends(session_dependency)]):\n    return TodoService(repo=TodoRepository, session=session)",
        "detail": "src.services.todo_service",
        "documentation": {}
    },
    {
        "label": "JWT_Settings",
        "kind": 6,
        "importPath": "src.app_config",
        "description": "src.app_config",
        "peekOfCode": "class JWT_Settings(BaseSettings):\n    # private_key_path: Path = KEYS_DIR / \"jwt-private.pem\"\n    private_key_path: Path = SRC_DIR / \"jwt-private.pem\"\n    # public_key_path: Path = KEYS_DIR / \"jwt-public.pem\"\n    public_key_path: Path = SRC_DIR / \"jwt-public.pem\"\n    algorithm: str = \"RS256\"\n    access_token_expire_minutes: int = 1440  # 1 day\n    cookie_alias: str = \"JWT-ACCESS-TOKEN\"\nclass RunConfig(BaseModel):\n    host: str = \"localhost\"",
        "detail": "src.app_config",
        "documentation": {}
    },
    {
        "label": "RunConfig",
        "kind": 6,
        "importPath": "src.app_config",
        "description": "src.app_config",
        "peekOfCode": "class RunConfig(BaseModel):\n    host: str = \"localhost\"\n    port: int = 8000\nclass ApiPrefixes(BaseModel):\n    v1_prefix: str = \"/v1\"\n    users_prefx: str = \"/users\"\nclass App_Settings(BaseSettings):\n    run_config: RunConfig = RunConfig()\n    api_prefix: ApiPrefixes = ApiPrefixes()\n    jwt_settings: JWT_Settings = JWT_Settings()",
        "detail": "src.app_config",
        "documentation": {}
    },
    {
        "label": "ApiPrefixes",
        "kind": 6,
        "importPath": "src.app_config",
        "description": "src.app_config",
        "peekOfCode": "class ApiPrefixes(BaseModel):\n    v1_prefix: str = \"/v1\"\n    users_prefx: str = \"/users\"\nclass App_Settings(BaseSettings):\n    run_config: RunConfig = RunConfig()\n    api_prefix: ApiPrefixes = ApiPrefixes()\n    jwt_settings: JWT_Settings = JWT_Settings()\napp_settings = App_Settings()",
        "detail": "src.app_config",
        "documentation": {}
    },
    {
        "label": "App_Settings",
        "kind": 6,
        "importPath": "src.app_config",
        "description": "src.app_config",
        "peekOfCode": "class App_Settings(BaseSettings):\n    run_config: RunConfig = RunConfig()\n    api_prefix: ApiPrefixes = ApiPrefixes()\n    jwt_settings: JWT_Settings = JWT_Settings()\napp_settings = App_Settings()",
        "detail": "src.app_config",
        "documentation": {}
    },
    {
        "label": "KEYS_DIR",
        "kind": 5,
        "importPath": "src.app_config",
        "description": "src.app_config",
        "peekOfCode": "KEYS_DIR = Path(__file__).parent / \"auth\" / \"jwt_keys\"\nSRC_DIR = Path(__file__).parent.parent\nclass JWT_Settings(BaseSettings):\n    # private_key_path: Path = KEYS_DIR / \"jwt-private.pem\"\n    private_key_path: Path = SRC_DIR / \"jwt-private.pem\"\n    # public_key_path: Path = KEYS_DIR / \"jwt-public.pem\"\n    public_key_path: Path = SRC_DIR / \"jwt-public.pem\"\n    algorithm: str = \"RS256\"\n    access_token_expire_minutes: int = 1440  # 1 day\n    cookie_alias: str = \"JWT-ACCESS-TOKEN\"",
        "detail": "src.app_config",
        "documentation": {}
    },
    {
        "label": "SRC_DIR",
        "kind": 5,
        "importPath": "src.app_config",
        "description": "src.app_config",
        "peekOfCode": "SRC_DIR = Path(__file__).parent.parent\nclass JWT_Settings(BaseSettings):\n    # private_key_path: Path = KEYS_DIR / \"jwt-private.pem\"\n    private_key_path: Path = SRC_DIR / \"jwt-private.pem\"\n    # public_key_path: Path = KEYS_DIR / \"jwt-public.pem\"\n    public_key_path: Path = SRC_DIR / \"jwt-public.pem\"\n    algorithm: str = \"RS256\"\n    access_token_expire_minutes: int = 1440  # 1 day\n    cookie_alias: str = \"JWT-ACCESS-TOKEN\"\nclass RunConfig(BaseModel):",
        "detail": "src.app_config",
        "documentation": {}
    },
    {
        "label": "app_settings",
        "kind": 5,
        "importPath": "src.app_config",
        "description": "src.app_config",
        "peekOfCode": "app_settings = App_Settings()",
        "detail": "src.app_config",
        "documentation": {}
    },
    {
        "label": "todo_data",
        "kind": 2,
        "importPath": "tests.test_todos.conftest",
        "description": "tests.test_todos.conftest",
        "peekOfCode": "def todo_data():\n    todo = {\n        \"user_username\": \"awsx\",\n        \"title\": \"string\",\n        \"description\": \"string\",\n    }\n    return todo",
        "detail": "tests.test_todos.conftest",
        "documentation": {}
    },
    {
        "label": "DB_URL_TEST",
        "kind": 5,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "DB_URL_TEST = db_settings.postgres_db_url_test\nengine_test = create_async_engine(\n    url=DB_URL_TEST,\n    poolclass=NullPool,\n    echo=True,\n)\nsession_factory_test = async_sessionmaker(bind=engine_test)\nprint(DB_URL_TEST)\n# session dependency\nasync def override_session_dep():",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "engine_test",
        "kind": 5,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "engine_test = create_async_engine(\n    url=DB_URL_TEST,\n    poolclass=NullPool,\n    echo=True,\n)\nsession_factory_test = async_sessionmaker(bind=engine_test)\nprint(DB_URL_TEST)\n# session dependency\nasync def override_session_dep():\n    async with session_factory_test() as session:",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "session_factory_test",
        "kind": 5,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "session_factory_test = async_sessionmaker(bind=engine_test)\nprint(DB_URL_TEST)\n# session dependency\nasync def override_session_dep():\n    async with session_factory_test() as session:\n        yield session\n        await session.close()\napp.dependency_overrides[session_dependency] = override_session_dep\n@pytest.fixture(scope=\"session\", autouse=True)\nasync def create_tables():",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "app.dependency_overrides[session_dependency]",
        "kind": 5,
        "importPath": "tests.conftest",
        "description": "tests.conftest",
        "peekOfCode": "app.dependency_overrides[session_dependency] = override_session_dep\n@pytest.fixture(scope=\"session\", autouse=True)\nasync def create_tables():\n    async with engine_test.begin() as conn:\n        await conn.run_sync(Base.metadata.drop_all)\n        await conn.run_sync(Base.metadata.create_all)\n    yield\n    # async with engine_test.begin() as conn:\n    # await conn.run_sync(Base.metadata.drop_all)\n@pytest.fixture(scope=\"session\")",
        "detail": "tests.conftest",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI(title=\"Welcome to City!\")\napp.include_router(auth_router, tags=[\"Authorization and register\"])\napp.include_router(router)\norigins = [\n    \"https://awesomexjs.github.io\",\n    \"https://awesomexjs.github.io/pet-fullstack-fastapi-react-city-app\"\n    \"http://localhost.tiangolo.com\",\n    \"https://localhost.tiangolo.com\",\n    \"http://localhost\",\n    \"http://localhost:8000\",",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "origins = [\n    \"https://awesomexjs.github.io\",\n    \"https://awesomexjs.github.io/pet-fullstack-fastapi-react-city-app\"\n    \"http://localhost.tiangolo.com\",\n    \"https://localhost.tiangolo.com\",\n    \"http://localhost\",\n    \"http://localhost:8000\",\n    \"http://localhost:10000\",\n    \"http://localhost:8080\",\n    \"https://aweso0mex.github.io/tech-magazine\",",
        "detail": "main",
        "documentation": {}
    }
]